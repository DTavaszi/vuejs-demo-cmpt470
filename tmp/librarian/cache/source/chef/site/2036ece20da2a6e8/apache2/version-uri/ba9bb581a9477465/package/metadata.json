{"name":"apache2","version":"5.0.1","description":"Installs and configures all aspects of apache2 using Debian style symlinks with helper definitions","long_description":"# apache2 Cookbook\n\n[![Cookbook Version](https://img.shields.io/cookbook/v/apache2.svg?style=flat)](https://supermarket.chef.io/cookbooks/apache2) [![Build Status](https://travis-ci.org/sous-chefs/apache2.svg?branch=master)](https://travis-ci.org/sous-chefs/apache2) [![License](https://img.shields.io/badge/license-Apache_2-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\nThis cookbook provides a complete Debian/Ubuntu style Apache HTTPD configuration. Non-Debian based distributions such as Red Hat/CentOS, ArchLinux and others supported by this cookbook will have a configuration that mimics Debian/Ubuntu style as it is easier to manage with Chef.\n\nDebian-style Apache configuration uses scripts to manage modules and sites (vhosts). The scripts are:\n\n- a2ensite\n- a2dissite\n- a2enmod\n- a2dismod\n- a2enconf\n- a2disconf\n\nThis cookbook ships with templates of these scripts for non Debian/Ubuntu platforms. The scripts are used in the **Definitions** below.\n\n## Cookbooks:\n\nThis cookbook has no direct external dependencies.\n\nDepending on your OS configuration and security policy, you may need additional recipes or cookbooks for this cookbook's recipes to converge on the node. In particular, the following Operating System settings may affect the behavior of this cookbook:\n\n- apt cache outdated\n- SELinux enabled\n- firewalls (such as iptables, ufw, etc.)\n- Compile tools\n- 3rd party repositories\n\nOn Ubuntu/Debian, use [apt](https://supermarket.chef.io/cookbooks/apt) cookbook to ensure the package cache is updated so Chef can install packages, or consider putting apt-get in your bootstrap process or [knife bootstrap template](http://docs.chef.io/knife_bootstrap.html)\n\nOn RHEL, SELinux is enabled by default. The [selinux](https://supermarket.chef.io/cookbooks/selinux) cookbook contains a `permissive` recipe that can be used to set SELinux to \"Permissive\" state. Otherwise, additional recipes need to be created by the user to address SELinux permissions.\n\nTo deal with firewalls Chef Software does provide an [iptables](https://supermarket.chef.io/cookbooks/iptables) and [ufw](https://supermarket.chef.io/cookbooks/ufw) cookbook but is migrating from the approach used there to a more robust solution utilizing the general [firewall](https://supermarket.chef.io/cookbooks/firewall) cookbook to setup rules. See those cookbooks' READMEs for documentation.\n\nBuild/compile tools may not be installed on the system by default. Some recipes (e.g., `apache2::mod_auth_openid`) build the module from source. Use the [build-essential](https://supermarket.chef.io/cookbooks/build-essential) cookbook to get essential build packages installed.\n\nOn ArchLinux, if you are using the `apache2::mod_auth_openid` recipe, you also need the [pacman](https://supermarket.chef.io/cookbooks/pacman) cookbook for the `pacman_aur` LWRP. Put `recipe[pacman]` on the node's expanded run list (on the node or in a role). This is not an explicit dependency because it is only required for this single recipe and platform; the pacman default recipe performs `pacman -Sy` to keep pacman's package cache updated.\n\n## Platforms:\n\nThe following platforms and versions are tested and supported using [test-kitchen](http://kitchen.ci/)\n\n- Amazon Linux 2013.09+\n- Ubuntu 14.04 / 16.04\n- Debian 8/9\n- CentOS 7\n- Fedora\n- OpenSUSE Leap\n\n### Notes for RHEL Family:\n\nOn Red Hat Enterprise Linux and derivatives, the EPEL repository may be necessary to install packages used in certain recipes. The `apache2::default` recipe, however, does not require any additional repositories. The [yum-epel](https://supermarket.chef.io/cookbooks/yum-epel) cookbook can be used to add the EPEL repository. See **Examples** for more information.\n\n# Usage\n\nUsing this cookbook is relatively straightforward. It is recommended to create a project or organization specific [wrapper cookbook](https://www.chef.io/blog/2013/12/03/doing-wrapper-cookbooks-right/) and add the desired recipes to the run list of a node, or create a role. Depending on your environment, you may have multiple roles that use different recipes from this cookbook. Adjust any attributes as desired. For example, to create a basic role for web servers that provide both HTTP and HTTPS:\n\n```ruby\n    % cat roles/webserver.rb\n    name \"webserver\"\n    description \"Systems that serve HTTP and HTTPS\"\n    run_list(\n      \"recipe[apache2]\",\n      \"recipe[apache2::mod_ssl]\"\n    )\n    default_attributes(\n      \"apache\" => {\n        \"listen\" => [\"*:80\", \"*:443\"]\n      }\n    )\n```\n\nFor examples of using the definitions in your own recipes, see their respective sections below.\n\n# Attributes\n\nThis cookbook uses many attributes, broken up into a few different kinds.\n\n## Platform specific\n\nIn order to support the broadest number of platforms, several attributes are determined based on the node's platform. See the attributes/default.rb file for default values in the case statement at the top of the file.\n\n- `node['apache']['package']` - Package name for Apache2\n- `node['apache']['perl_pkg']` - Package name for Perl\n- `node['apache']['dir']` - Location for the Apache configuration\n- `node['apache']['log_dir']` - Location for Apache logs\n- `node['apache']['error_log']` - Location for the default error log\n- `node['apache']['access_log']` - Location for the default access log\n- `node['apache']['user']` - User Apache runs as\n- `node['apache']['group']` - Group Apache runs as\n- `node['apache']['binary']` - Apache httpd server daemon\n- `node['apache']['conf_dir']` - Location for the main config file (e.g apache2.conf or httpd.conf)\n- `node['apache']['docroot_dir']` - Location for docroot\n- `node['apache']['cgibin_dir']` - Location for cgi-bin\n- `node['apache']['icondir']` - Location for icons\n- `node['apache']['cache_dir']` - Location for cached files used by Apache itself or recipes\n- `node['apache']['pid_file']` - Location of the PID file for Apache httpd\n- `node['apache']['lib_dir']` - Location for shared libraries\n- `node['apache']['default_site_enabled']` - Default site enabled. Default is false.\n- `node['apache']['ext_status']` - if true, enables ExtendedStatus for `mod_status`\n- `node['apache']['locale']` - Locale to set in sysconfig or envvars and used for subprocesses and modules (like mod_dav and mod_wsgi). On debian systems Uses system-local if set to 'system', defaults to 'C'.\n\n## General settings\n\nThese are general settings used in recipes and templates. Default values are noted.\n\n- `node['apache']['listen']` - Array of address:port combinations that httpd should listen on. Default is any address and port 80 (`[\"*:80\"]`).\n- `node['apache']['contact']` - Value for ServerAdmin directive. Default \"ops@example.com\".\n- `node['apache']['timeout']` - Value for the Timeout directive. Default is 300.\n- `node['apache']['keepalive']` - Value for the KeepAlive directive. Default is On.\n- `node['apache']['keepaliverequests']` - Value for MaxKeepAliveRequests. Default is 100.\n- `node['apache']['keepalivetimeout']` - Value for the KeepAliveTimeout directive. Default is 5.\n- `node['apache']['sysconfig_additional_params']` - Additionals variables set in sysconfig file. Default is empty.\n- `node['apache']['log_level']` - Value for LogLevel directive. Default is 'warn'.\n- `node['apache']['default_modules']` - Array of module names. Can take \"mod_FOO\" or \"FOO\" as names, where FOO is the apache module, e.g. \"`mod_status`\" or \"`status`\".\n- `node['apache']['mpm']` - With apache.version 2.4, specifies what Multi-Processing Module to enable. Defaults to platform default, otherwise it is \"prefork\"\n\nThe modules listed in `default_modules` will be included as recipes in `recipe[apache::default]`.\n\n## Prefork attributes\n\nPrefork attributes are used for tuning the Apache HTTPD [prefork MPM](http://httpd.apache.org/docs/current/mod/prefork.html) configuration.\n\n- `node['apache']['prefork']['startservers']` - initial number of server processes to start. Default is 16.\n- `node['apache']['prefork']['minspareservers']` - minimum number of spare server processes. Default 16.\n- `node['apache']['prefork']['maxspareservers']` - maximum number of spare server processes. Default 32.\n- `node['apache']['prefork']['serverlimit']` - upper limit on configurable server processes. Default 256.\n- `node['apache']['prefork']['maxrequestworkers']` - Maximum number of connections that will be processed simultaneously. Default 256.\n- `node['apache']['prefork']['maxconnectionsperchild']` - Maximum number of request a child process will handle. Default 10000.\n\n## Worker attributes\n\nWorker attributes are used for tuning the Apache HTTPD [worker MPM](http://httpd.apache.org/docs/current/mod/worker.html) configuration.\n\n- `node['apache']['worker']['startservers']` - Initial number of server processes to start. Default 4\n- `node['apache']['worker']['serverlimit']` - Upper limit on configurable server processes. Default 16.\n- `node['apache']['worker']['minsparethreads']` - Minimum number of spare worker threads. Default 64\n- `node['apache']['worker']['maxsparethreads']` - Maximum number of spare worker threads. Default 192.\n- `node['apache']['worker']['maxrequestworkers']` - Maximum number of simultaneous connections. Default 1024.\n- `node['apache']['worker']['maxconnectionsperchild']` - Limit on the number of connections that an individual child server will handle during its life.\n\n## Event attributes\n\nEvent attributes are used for tuning the Apache HTTPD [event MPM](http://httpd.apache.org/docs/current/mod/event.html) configuration.\n\n- `node['apache']['event']['startservers']` - Initial number of child server processes created at startup. Default 4.\n- `node['apache']['event']['serverlimit']` - Upper limit on configurable number of processes. Default 16.\n- `node['apache']['event']['minsparethreads']` - Minimum number of spare worker threads. Default 64\n- `node['apache']['event']['maxsparethreads']` - Maximum number of spare worker threads. Default 192.\n- `node['apache']['event']['threadlimit']` - Upper limit on the configurable number of threads per child process. Default 192.\n- `node['apache']['event']['threadsperchild']` - Number of threads created by each child process. Default 64.\n- `node['apache']['event']['maxrequestworkers']` - Maximum number of connections that will be processed simultaneously.\n- `node['apache']['event']['maxconnectionsperchild']` - Limit on the number of connections that an individual child server will handle during its life.\n\n## Other/Unsupported MPM\n\nTo use the cookbook with an unsupported mpm (other than prefork, event or worker):\n\n- set `node['apache']['mpm']` to the name of the module (e.g. `itk`)\n- in your cookbook, after `include_recipe 'apache2'` use the `apache_module` definition to enable/disable the required module(s)\n\n## Module specific attributes\n\nSome module recipes have their own attributes that can be used to alter and modify the behavior of this cookbook. Please see the sections for the indivual modules below for more information on those attributes.\n\n# Recipes\n\nMost of the recipes in the cookbook are for enabling Apache modules. Where additional configuration or behavior is used, it is documented below in more detail.\n\nThe following recipes merely enable the specified module: `mod_actions`, `mod_alias`, `mod_auth_basic`, `mod_auth_digest`, `mod_authn_file`, `mod_authnz_ldap`, `mod_authz_default`, `mod_authz_groupfile`, `mod_authz_host`, `mod_authz_user`, `mod_autoindex`, `mod_cgi`, `mod_dav_fs`, `mod_dav_svn`, `mod_deflate`, `mod_dir`, `mod_env`, `mod_expires`, `mod_headers`, `mod_ldap`, `mod_log_config`, `mod_mime`, `mod_negotiation`, `mod_proxy`, `mod_proxy_ajp`, `mod_proxy_balancer`, `mod_proxy_connect`, `mod_proxy_http`, `mod_python`, `mod_rewrite`, `mod_setenvif`, `mod_status`, `mod_wsgi`, `mod_xsendfile`.\n\nOn RHEL Family distributions, certain modules ship with a config file with the package. The recipes here may delete those configuration files to ensure they don't conflict with the settings from the cookbook, which will use per-module configuration in `/etc/httpd/mods-enabled`.\n\n## default\n\nThe default recipe does a number of things to set up Apache HTTPd. It also includes a number of modules based on the attribute `node['apache']['default_modules']` as recipes.\n\n## mod_auth_cas\n\nThis recipe installs the proper package and enables the `auth_cas` module. It can install from source or package. Package is the default, set the attribute `node['apache']['mod_auth_cas']['from_source']` to true to enable source installation. Modify the version to install by changing the attribute `node['apache']['mod_auth_cas']['source_revision']`. It is a version tag by default, but could be master, or another tag, or branch.\n\nThe module configuration is written out with the `CASCookiePath` set, otherwise an error loading the module may cause Apache to not start.\n\n**Note**: This recipe does not work on EL 6 platforms unless epel-testing repository is enabled (outside the scope of this cookbook), or the package version 1.0.8.1-3.el6 or higher is otherwise available to the system due to this bug:\n\n<https://bugzilla.redhat.com/show_bug.cgi?format=multiple&id=708550>\n\n## mod_auth_openid\n\nThis recipe compiles the module from source. In addition to `build-essential`, some other packages are included for installation like the GNU C++ compiler and development headers.\n\nTo use the module in your own cookbooks to authenticate systems using OpenIDs, specify an array of OpenIDs that are allowed to authenticate with the attribute `node['apache']['allowed_openids']`. Use the following in a vhost to protect with OpenID authentication:\n\n```\nAuthType OpenID require user <%= node['apache']['allowed_openids'].join(' ') %>\nAuthOpenIDDBLocation <%= node['apache']['mod_auth_openid']['dblocation'] %>\n```\n\nChange the DBLocation with the attribute as required; this file is in a different location than previous versions, see below. It should be a sane default for most platforms, though, see `attributes/mod_auth_openid.rb`.\n\nThe following attributes are in the `attributes/mod_auth_openid.rb` file.\n\n- `node['apache']['mod_auth_openid']['checksum']` - sha256sum of the tarball containing the source.\n- `node['apache']['mod_auth_openid']['ref']` - Any sha, tag, or branch found from <https://github.com/bmuller/mod_auth_openid>\n- `node['apache']['mod_auth_openid']['version']` - directory name version within the tarball\n- `node['apache']['mod_auth_openid']['cache_dir']` - the cache directory is where the sqlite3 database is stored. It is separate so it can be managed as a directory resource.\n- `node['apache']['mod_auth_openid']['dblocation']` - filename of the sqlite3 database used for directive `AuthOpenIDDBLocation`, stored in the `cache_dir` by default.\n- `node['apache']['mod_auth_openid']['configure_flags']` - optional array of configure flags passed to the `./configure` step in the compilation of the module.\n\n## mod_fastcgi\n\nInstall the fastcgi package and enable the module.\n\nNote: In Ubuntu 14.04, the `libapache2-mod-fastcgi` module is not available by default due to the [Multiverse](https://help.ubuntu.com/community/Repositories/Ubuntu) repositories. You need to enable the multiverse repositories either from `/etc/apt/sources.list` or use the [apt](https://supermarket.chef.io/cookbooks/apt) cookbook.\n\n## mod_fcgid\n\nInstalls the fcgi package and enables the module. Requires EPEL on RHEL family.\n\n## mod_php\n\nSimply installs the appropriate package and enables the module\n\n- `node['apache']['mod_php']['install_method']` - default `package` can be overridden to avoid package installs.\n\n## mod_ssl\n\nBesides installing and enabling `mod_ssl`, this recipe will append port 443 to the `node['apache']['listen']` attributes for all addresses and update the ports.conf.\n\n- `node['apache']['mod_ssl']['cipher_suite']` - sets the SSLCiphersuite value to the specified string. The default is considered \"sane\" but you may need to change it for your local security policy, e.g. if you have PCI-DSS requirements. Additional commentary on the [original pull request](https://github.com/sous-chefs/apache2/pull/15#commitcomment-1605406).\n- `node['apache']['mod_ssl']['honor_cipher_order']` - Option to prefer the server's cipher preference order. Default 'On'.\n- `node['apache']['mod_ssl']['insecure_renegotiation']` - Option to enable support for insecure renegotiation. Default 'Off'.\n- `node['apache']['mod_ssl']['strict_sni_vhost_check']` - Whether to allow non-SNI clients to access a name-based virtual host. Default 'Off'.\n- `node['apache']['mod_ssl']['session_cache']` - Configures the OCSP stapling cache. Default `shmcb:/var/run/apache2/ssl_scache`\n- `node['apache']['mod_ssl']['session_cache_timeout']` - Number of seconds before an SSL session expires in the Session Cache. Default 300.\n- `node['apache']['mod_ssl']['compression']` - Enable compression on the SSL level. Default 'Off'.\n- `node['apache']['mod_ssl']['use_stapling']` - Enable stapling of OCSP responses in the TLS handshake. Default 'Off'.\n- `node['apache']['mod_ssl']['stapling_responder_timeout']` - Timeout for OCSP stapling queries. Default 5\n- `node['apache']['mod_ssl']['stapling_return_responder_errors']` - Pass stapling related OCSP errors on to client. Default 'Off'\n- `node['apache']['mod_ssl']['stapling_cache']` - Configures the OCSP stapling cache. Default `shmcb:/var/run/ocsp(128000)`\n- `node['apache']['mod_ssl']['pass_phrase_dialog']` - Configures SSLPassPhraseDialog. Default `builtin`\n- `node['apache']['mod_ssl']['mutex']` - Configures SSLMutex. Default `file:/var/run/apache2/ssl_mutex`\n- `node['apache']['mod_ssl']['directives']` - Hash for add any custom directive.\n\nFor general information on these attributes see <http://httpd.apache.org/docs/current/mod/mod_ssl.html>\n\nFor more information on these directives and how to best secure your site see\n\n- <https://bettercrypto.org/>\n- <https://wiki.mozilla.org/Security/Server_Side_TLS>\n- <https://www.insecure.ws/linux/apache_ssl.html>\n- <https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/>\n- <https://istlsfastyet.com/>\n- <https://www.ssllabs.com/projects/best-practices/>\n\n# Definitions\n\nThe cookbook provides a few definitions. At some point in the future these definitions will be refactored into custom resources see [issue 414](https://github.com/sous-chefs/apache2/issues/414).\n\n## apache_conf\n\nWrites conf files to the `conf-available` folder, and passes enabled values to `apache_config`.\n\nThis definition should generally be called over `apache_config`.\n\n### Parameters:\n\n- `name` - Name of the config placed and enabled or disabled with the `a2enconf` or `a2disconf` scripts.\n- `enable` - Default true, which uses `a2enconf` to enable the config. If false, the config will be disabled with `a2disconf`.\n- `conf_path` - path to put the config in if you need to override the default `conf-available`.\n- `source` - The source configuration template name. The default value is `params[:name].conf.erb`\n- `cookbook` - The cookbook in which the configuration template is located. The default value is the current cookbook.\n\n### Examples:\n\nPlace and enable the example conf:\n\n```ruby\n    apache_conf 'example' do\n      enable true\n    end\n```\n\nPlace and disable (or never enable to begin with) the example conf:\n\n```ruby\n    apache_conf 'example' do\n      enable false\n    end\n```\n\nPlace the example conf, which has a different path than the default (conf-*):\n\n```ruby\n    apache_conf 'example' do\n      conf_path '/random/example/path'\n      enable false\n    end\n```\n\n## apache_config (internal)\n\nSets up configuration file for Apache from a template. The template should be in the same cookbook where the definition is used. This is used by the `apache_conf` definition and should not be used directly.\n\nIt will use `a2enconf` and `a2disconf` to control the symlinking of configuration files between `conf-available` and `conf-enabled`.\n\nEnable or disable an Apache config file in `#{node['apache']['dir']}/conf-available` by calling `a2enconf` or `a2disconf` to manage the symbolic link in `#{node['apache']['dir']}/conf-enabled`. These config files should be created in your cookbook, and placed on the system using `apache_conf`\n\n### Parameters:\n\n- `name` - Name of the config enabled or disabled with the `a2enconf` or `a2disconf` scripts.\n- `source` - The location of a template file. The default `name.erb`.\n- `cookbook` - The cookbook in which the configuration template is located (if it is not located in the current cookbook). The default value is the current cookbook.\n- `enable` - Default true, which uses `a2enconf` to enable the config. If false, the config will be disabled with `a2disconf`.\n\n### Examples:\n\nEnable the example config.\n\n```ruby\n    apache_config 'example' do\n      enable true\n    end\n```\n\nDisable a module:\n\n```ruby\n    apache_config 'disabled_example' do\n      enable false\n    end\n```\n\nSee the recipes directory for many more examples of `apache_config`.\n\n## apache_module\n\nEnable or disable an Apache module in `#{node['apache']['dir']}/mods-available` by calling `a2enmod` or `a2dismod` to manage the symbolic link in `#{node['apache']['dir']}/mods-enabled`. If the module has a configuration file, a template should be created in the cookbook where the definition is used. See **Examples**.\n\n### Parameters:\n\n- `name` - Name of the module enabled or disabled with the `a2enmod` or `a2dismod` scripts.\n- `identifier` - String to identify the module for the `LoadModule` directive. Not typically needed, defaults to `#{name}_module`\n- `enable` - Default true, which uses `a2enmod` to enable the module. If false, the module will be disabled with `a2dismod`.\n- `conf` - Default false. Set to true if the module has a config file, which will use `apache_mod` for the file.\n- `filename` - specify the full name of the file, e.g.\n\n### Examples:\n\nEnable the ssl module, which also has a configuration template in `templates/default/mods/ssl.conf.erb`.\n\n```ruby\n    apache_module \"ssl\" do\n      conf true\n    end\n```\n\nEnable the php5 module, which has a different filename than the module default:\n\n```ruby\n    apache_module \"php5\" do\n      filename \"libphp5.so\"\n    end\n```\n\nDisable a module:\n\n```ruby\n    apache_module \"disabled_module\" do\n      enable false\n    end\n```\n\nSee the recipes directory for many more examples of `apache_module`.\n\n## apache_mod (internal)\n\nSets up configuration file for an Apache module from a template. The template should be in the same cookbook where the definition is used. This is used by the `apache_module` definition and is not often used directly.\n\nThis will use a template resource to write the module's configuration file in the `mods-available` under the Apache configuration directory (`node['apache']['dir']`). This is a platform-dependent location. See **apache_module**.\n\n### Parameters:\n\n- `name` - Name of the template. When used from the `apache_module`, it will use the same name as the module.\n\n### Examples:\n\nCreate `#{node['apache']['dir']}/mods-available/alias.conf`.\n\n```ruby\n    apache_mod \"alias\"\n```\n\n## apache_site\n\nEnable or disable a VirtualHost in `#{node['apache']['dir']}/sites-available` by calling a2ensite or a2dissite to manage the symbolic link in `#{node['apache']['dir']}/sites-enabled`.\n\nThe template for the site must be managed as a separate resource. To combine the template with enabling a site, see `web_app`.\n\n### Parameters:\n\n- `name` - Name of the site.\n- `enable` - Default true, which uses `a2ensite` to enable the site. If false, the site will be disabled with `a2dissite`.\n\n## web_app\n\nManage a template resource for a VirtualHost site, and enable it with `apache_site`. This is commonly done for managing web applications such as Ruby on Rails, PHP or Django, and the default behavior reflects that. However it is flexible.\n\nThis definition includes some recipes to make sure the system is configured to have Apache and some sane default modules:\n\n- `apache2`\n- `apache2::mod_rewrite`\n- `apache2::mod_deflate`\n- `apache2::mod_headers`\n\nIt will then configure the template (see **Parameters** and **Examples** below), and enable or disable the site per the `enable` parameter.\n\n### Parameters:\n\nCurrent parameters used by the definition:\n\n- `name` - The name of the site. The template will be written to `#{node['apache']['dir']}/sites-available/#{params['name']}.conf`\n- `cookbook` - Optional. Cookbook where the source template is. If this is not defined, Chef will use the named template in the cookbook where the definition is used.\n- `template` - Default `web_app.conf.erb`, source template file.\n- `enable` - Default true. Passed to the `apache_site` definition.\n\nAdditional parameters can be defined when the definition is called in a recipe, see **Examples**.\n\n### Examples:\n\nThe recommended way to use the `web_app` definition is in a application specific cookbook named \"my_app\". The following example would look for a template named 'web_app.conf.erb' in your cookbook containing the apache httpd directives defining the `VirtualHost` that would serve up \"my_app\".\n\n```ruby\n    web_app \"my_app\" do\n       template 'web_app.conf.erb'\n       server_name node['my_app']['hostname']\n    end\n```\n\nAll parameters are passed into the template. You can use whatever you like. The apache2 cookbook comes with a `web_app.conf.erb` template as an example. The following parameters are used in the template:\n\n- `server_name` - ServerName directive.\n- `server_aliases` - ServerAlias directive. Must be an array of aliases.\n- `docroot` - DocumentRoot directive.\n- `application_name` - Used in RewriteLog directive. Will be set to the `name` parameter.\n- `directory_index` - Allow overriding the default DirectoryIndex setting, optional\n- `directory_options` - Override Options on the docroot, for example to add parameters like Includes or Indexes, optional.\n- `allow_override` - Modify the AllowOverride directive on the docroot to support apps that need .htaccess to modify configuration or require authentication.\n\nTo use the default web_app, for example:\n\n```ruby\n    web_app \"my_site\" do\n      server_name node['hostname']\n      server_aliases [node['fqdn'], \"my-site.example.com\"]\n      docroot \"/srv/www/my_site\"\n      cookbook 'apache2'\n    end\n```\n\nThe parameters specified will be used as:\n\n- `@params[:server_name]`\n- `@params[:server_aliases]`\n- `@params[:docroot]`\n\nIn the template. When you write your own, the `@` is significant.\n\n## License and Authors\n\n```text\n* Author:: Adam Jacob <adam@chef.io>\n* Author:: Joshua Timberman <joshua@chef.io>\n* Author:: Bryan McLellan <btm@chef.io>\n* Author:: Dave Esposito <esposito@espolinux.corpnet.local>\n* Author:: David Abdemoulaie <github@hobodave.com>\n* Author:: Edmund Haselwanter <edmund@haselwanter.com>\n* Author:: Eric Rochester <err8n@virginia.edu>\n* Author:: Jim Browne <jbrowne@42lines.net>\n* Author:: Matthew Kent <mkent@magoazul.com>\n* Author:: Nathen Harvey <nharvey@chef.io>\n* Author:: Ringo De Smet <ringo.de.smet@amplidata.com>\n* Author:: Sean OMeara <sean@sean.io>\n* Author:: Seth Chisamore <schisamo@chef.io>\n* Author:: Gilles Devaux <gilles@peerpong.com>\n* Author:: Sander van Zoest <sander+cookbooks@vanzoest.com>\n* Author:: Taylor Price <tayworm@gmail.com>\n* Author:: Ben Dean <ben.dean@ontariosystems.com>\n\n* Copyright:: 2009-2017, Chef Software, Inc\n* Copyright:: 2011, Atriso\n* Copyright:: 2011, CustomInk, LLC.\n* Copyright:: 2013-2014, OneHealth Solutions, Inc.\n* Copyright:: 2014, Viverae, Inc.\n* Copyright:: 2015-2016, Alexander van Zoest\n* Copyright:: 2015, Ontario Systems, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"Sous Chefs","maintainer_email":"help@sous-chefs.org","license":"Apache-2.0","platforms":{"debian":">= 0.0.0","ubuntu":">= 0.0.0","redhat":">= 0.0.0","centos":">= 0.0.0","fedora":">= 0.0.0","amazon":">= 0.0.0","scientific":">= 0.0.0","freebsd":">= 0.0.0","suse":">= 0.0.0","opensuse":">= 0.0.0","opensuseleap":">= 0.0.0","arch":">= 0.0.0"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/sous-chefs/apache2","issues_url":"https://github.com/sous-chefs/apache2/issues","chef_version":[[">= 12.1"]],"ohai_version":[]}